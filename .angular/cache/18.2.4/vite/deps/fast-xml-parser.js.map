{
  "version": 3,
  "sources": ["../../../../../node_modules/fast-xml-parser/src/util.js", "../../../../../node_modules/fast-xml-parser/src/validator.js", "../../../../../node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js", "../../../../../node_modules/fast-xml-parser/src/xmlparser/xmlNode.js", "../../../../../node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js", "../../../../../node_modules/strnum/strnum.js", "../../../../../node_modules/fast-xml-parser/src/ignoreAttributes.js", "../../../../../node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js", "../../../../../node_modules/fast-xml-parser/src/xmlparser/node2json.js", "../../../../../node_modules/fast-xml-parser/src/xmlparser/XMLParser.js", "../../../../../node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js", "../../../../../node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js", "../../../../../node_modules/fast-xml-parser/src/fxp.js"],
  "sourcesContent": ["'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nexport const nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*';\nconst regexName = new RegExp('^' + nameRegexp + '$');\nexport function getAllMatches(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n}\nexport const isName = function (string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\nexport function isExist(v) {\n  return typeof v !== 'undefined';\n}\nexport function isEmptyObject(obj) {\n  return Object.keys(obj).length === 0;\n}\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexport function merge(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [a[keys[i]]];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n}\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexport function getValue(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n}\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};", "'use strict';\n\nimport { getAllMatches, isName } from './util.js';\nconst defaultOptions = {\n  allowBooleanAttributes: false,\n  //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexport function validate(xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  for (let i = 0; i < xmlData.length; i++) {\n    if (xmlData[i] === '<' && xmlData[i + 1] === '?') {\n      i += 2;\n      i = readPI(xmlData, i);\n      if (i.err) return i;\n    } else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length && xmlData[i] !== '>' && xmlData[i] !== ' ' && xmlData[i] !== '\\t' && xmlData[i] !== '\\n' && xmlData[i] !== '\\r'; i++) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\" + tagName + \"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\" + tagName + \"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\" + tagName + \"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\" + tagName + \"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else if (tags.length === 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\" + tagName + \"' has not been opened.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag', \"Expected closing tag '\" + otg.tagName + \"' (opened in line \" + openPos.line + \", col \" + openPos.col + \") instead of closing tag '\" + tagName + \"'.\", getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if (options.unpairedTags.indexOf(tagName) !== -1) {\n            //don't push into stack\n          } else {\n            tags.push({\n              tagName,\n              tagStartPos\n            });\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i + 1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else {\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1) return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          } else {\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if (isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\" + xmlData[i] + \"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  } else if (tags.length == 1) {\n    return getErrorObject('InvalidTag', \"Unclosed tag '\" + tags[0].tagName + \"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  } else if (tags.length > 0) {\n    return getErrorObject('InvalidXml', \"Invalid '\" + JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '') + \"' found.\", {\n      line: 1,\n      col: 1\n    });\n  }\n  return true;\n}\n;\nfunction isWhiteSpace(char) {\n  return char === ' ' || char === '\\t' || char === '\\n' || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (xmlData.length > i + 8 && xmlData[i + 1] === 'D' && xmlData[i + 2] === 'O' && xmlData[i + 3] === 'C' && xmlData[i + 4] === 'T' && xmlData[i + 5] === 'Y' && xmlData[i + 6] === 'P' && xmlData[i + 7] === 'E') {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (xmlData.length > i + 9 && xmlData[i + 1] === '[' && xmlData[i + 2] === 'C' && xmlData[i + 3] === 'D' && xmlData[i + 4] === 'A' && xmlData[i + 5] === 'T' && xmlData[i + 6] === 'A' && xmlData[i + 7] === '[') {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n  return i;\n}\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\" + matches[i][2] + \"' has no space in starting.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\" + matches[i][2] + \"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\" + matches[i][2] + \"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\" + attrName + \"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\" + attrName + \"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n  return true;\n}\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';') return i;\n    if (!xmlData[i].match(re)) break;\n  }\n  return -1;\n}\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';') return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20) continue;\n    if (xmlData[i] === ';') break;\n    return -1;\n  }\n  return i;\n}\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col\n    }\n  };\n}\nfunction validateAttrName(attrName) {\n  return isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}", "export const defaultOptions = {\n  preserveOrder: false,\n  attributeNamePrefix: '@_',\n  attributesGroupName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  removeNSPrefix: false,\n  // remove NS from tag name or attribute name if true\n  allowBooleanAttributes: false,\n  //a tag can have attributes without any value\n  //ignoreRootElement : false,\n  parseTagValue: true,\n  parseAttributeValue: false,\n  trimValues: true,\n  //Trim string values of tag and attributes\n  cdataPropName: false,\n  numberParseOptions: {\n    hex: true,\n    leadingZeros: true,\n    eNotation: true\n  },\n  tagValueProcessor: function (tagName, val) {\n    return val;\n  },\n  attributeValueProcessor: function (attrName, val) {\n    return val;\n  },\n  stopNodes: [],\n  //nested tags will not be parsed even for errors\n  alwaysCreateTextNode: false,\n  isArray: () => false,\n  commentPropName: false,\n  unpairedTags: [],\n  processEntities: true,\n  htmlEntities: false,\n  ignoreDeclaration: false,\n  ignorePiTags: false,\n  transformTagName: false,\n  transformAttributeName: false,\n  updateTag: function (tagName, jPath, attrs) {\n    return tagName;\n  },\n  // skipEmptyListItem: false\n  captureMetaData: false\n};\nexport const buildOptions = function (options) {\n  return Object.assign({}, defaultOptions, options);\n};", "'use strict';\n\nlet METADATA_SYMBOL;\nif (typeof Symbol !== \"function\") {\n  METADATA_SYMBOL = \"@@xmlMetadata\";\n} else {\n  METADATA_SYMBOL = Symbol(\"XML Node Metadata\");\n}\nexport default class XmlNode {\n  constructor(tagname) {\n    this.tagname = tagname;\n    this.child = []; //nested tags, text, cdata, comments in order\n    this[\":@\"] = {}; //attributes map\n  }\n  add(key, val) {\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\n    if (key === \"__proto__\") key = \"#__proto__\";\n    this.child.push({\n      [key]: val\n    });\n  }\n  addChild(node, startIndex) {\n    if (node.tagname === \"__proto__\") node.tagname = \"#__proto__\";\n    if (node[\":@\"] && Object.keys(node[\":@\"]).length > 0) {\n      this.child.push({\n        [node.tagname]: node.child,\n        [\":@\"]: node[\":@\"]\n      });\n    } else {\n      this.child.push({\n        [node.tagname]: node.child\n      });\n    }\n    // if requested, add the startIndex\n    if (startIndex !== undefined) {\n      // Note: for now we just overwrite the metadata. If we had more complex metadata,\n      // we might need to do an object append here:  metadata = { ...metadata, startIndex }\n      this.child[this.child.length - 1][METADATA_SYMBOL] = {\n        startIndex\n      };\n    }\n  }\n  /** symbol used for metadata */\n  static getMetaDataSymbol() {\n    return METADATA_SYMBOL;\n  }\n}", "import { isName } from '../util.js';\n\n//TODO: handle comments\nexport default function readDocType(xmlData, i) {\n  const entities = {};\n  if (xmlData[i + 3] === 'O' && xmlData[i + 4] === 'C' && xmlData[i + 5] === 'T' && xmlData[i + 6] === 'Y' && xmlData[i + 7] === 'P' && xmlData[i + 8] === 'E') {\n    i = i + 9;\n    let angleBracketsCount = 1;\n    let hasBody = false,\n      comment = false;\n    let exp = \"\";\n    for (; i < xmlData.length; i++) {\n      if (xmlData[i] === '<' && !comment) {\n        //Determine the tag type\n        if (hasBody && hasSeq(xmlData, \"!ENTITY\", i)) {\n          i += 7;\n          let entityName, val;\n          [entityName, val, i] = readEntityExp(xmlData, i + 1);\n          if (val.indexOf(\"&\") === -1)\n            //Parameter entities are not supported\n            entities[entityName] = {\n              regx: RegExp(`&${entityName};`, \"g\"),\n              val: val\n            };\n        } else if (hasBody && hasSeq(xmlData, \"!ELEMENT\", i)) {\n          i += 8; //Not supported\n          const {\n            index\n          } = readElementExp(xmlData, i + 1);\n          i = index;\n        } else if (hasBody && hasSeq(xmlData, \"!ATTLIST\", i)) {\n          i += 8; //Not supported\n          // const {index} = readAttlistExp(xmlData,i+1);\n          // i = index;\n        } else if (hasBody && hasSeq(xmlData, \"!NOTATION\", i)) {\n          i += 9; //Not supported\n          const {\n            index\n          } = readNotationExp(xmlData, i + 1);\n          i = index;\n        } else if (hasSeq(xmlData, \"!--\", i)) comment = true;else throw new Error(\"Invalid DOCTYPE\");\n        angleBracketsCount++;\n        exp = \"\";\n      } else if (xmlData[i] === '>') {\n        //Read tag content\n        if (comment) {\n          if (xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\") {\n            comment = false;\n            angleBracketsCount--;\n          }\n        } else {\n          angleBracketsCount--;\n        }\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      } else if (xmlData[i] === '[') {\n        hasBody = true;\n      } else {\n        exp += xmlData[i];\n      }\n    }\n    if (angleBracketsCount !== 0) {\n      throw new Error(`Unclosed DOCTYPE`);\n    }\n  } else {\n    throw new Error(`Invalid Tag instead of DOCTYPE`);\n  }\n  return {\n    entities,\n    i\n  };\n}\nconst skipWhitespace = (data, index) => {\n  while (index < data.length && /\\s/.test(data[index])) {\n    index++;\n  }\n  return index;\n};\nfunction readEntityExp(xmlData, i) {\n  //External entities are not supported\n  //    <!ENTITY ext SYSTEM \"http://normal-website.com\" >\n\n  //Parameter entities are not supported\n  //    <!ENTITY entityname \"&anotherElement;\">\n\n  //Internal entities are supported\n  //    <!ENTITY entityname \"replacement text\">\n\n  // Skip leading whitespace after <!ENTITY\n  i = skipWhitespace(xmlData, i);\n\n  // Read entity name\n  let entityName = \"\";\n  while (i < xmlData.length && !/\\s/.test(xmlData[i]) && xmlData[i] !== '\"' && xmlData[i] !== \"'\") {\n    entityName += xmlData[i];\n    i++;\n  }\n  validateEntityName(entityName);\n\n  // Skip whitespace after entity name\n  i = skipWhitespace(xmlData, i);\n\n  // Check for unsupported constructs (external entities or parameter entities)\n  if (xmlData.substring(i, i + 6).toUpperCase() === \"SYSTEM\") {\n    throw new Error(\"External entities are not supported\");\n  } else if (xmlData[i] === \"%\") {\n    throw new Error(\"Parameter entities are not supported\");\n  }\n\n  // Read entity value (internal entity)\n  let entityValue = \"\";\n  [i, entityValue] = readIdentifierVal(xmlData, i, \"entity\");\n  i--;\n  return [entityName, entityValue, i];\n}\nfunction readNotationExp(xmlData, i) {\n  // Skip leading whitespace after <!NOTATION\n  i = skipWhitespace(xmlData, i);\n\n  // Read notation name\n  let notationName = \"\";\n  while (i < xmlData.length && !/\\s/.test(xmlData[i])) {\n    notationName += xmlData[i];\n    i++;\n  }\n  validateEntityName(notationName);\n\n  // Skip whitespace after notation name\n  i = skipWhitespace(xmlData, i);\n\n  // Check identifier type (SYSTEM or PUBLIC)\n  const identifierType = xmlData.substring(i, i + 6).toUpperCase();\n  if (identifierType !== \"SYSTEM\" && identifierType !== \"PUBLIC\") {\n    throw new Error(`Expected SYSTEM or PUBLIC, found \"${identifierType}\"`);\n  }\n  i += identifierType.length;\n\n  // Skip whitespace after identifier type\n  i = skipWhitespace(xmlData, i);\n\n  // Read public identifier (if PUBLIC)\n  let publicIdentifier = null;\n  let systemIdentifier = null;\n  if (identifierType === \"PUBLIC\") {\n    [i, publicIdentifier] = readIdentifierVal(xmlData, i, \"publicIdentifier\");\n\n    // Skip whitespace after public identifier\n    i = skipWhitespace(xmlData, i);\n\n    // Optionally read system identifier\n    if (xmlData[i] === '\"' || xmlData[i] === \"'\") {\n      [i, systemIdentifier] = readIdentifierVal(xmlData, i, \"systemIdentifier\");\n    }\n  } else if (identifierType === \"SYSTEM\") {\n    // Read system identifier (mandatory for SYSTEM)\n    [i, systemIdentifier] = readIdentifierVal(xmlData, i, \"systemIdentifier\");\n    if (!systemIdentifier) {\n      throw new Error(\"Missing mandatory system identifier for SYSTEM notation\");\n    }\n  }\n  return {\n    notationName,\n    publicIdentifier,\n    systemIdentifier,\n    index: --i\n  };\n}\nfunction readIdentifierVal(xmlData, i, type) {\n  let identifierVal = \"\";\n  const startChar = xmlData[i];\n  if (startChar !== '\"' && startChar !== \"'\") {\n    throw new Error(`Expected quoted string, found \"${startChar}\"`);\n  }\n  i++;\n  while (i < xmlData.length && xmlData[i] !== startChar) {\n    identifierVal += xmlData[i];\n    i++;\n  }\n  if (xmlData[i] !== startChar) {\n    throw new Error(`Unterminated ${type} value`);\n  }\n  i++;\n  return [i, identifierVal];\n}\nfunction readElementExp(xmlData, i) {\n  // <!ELEMENT br EMPTY>\n  // <!ELEMENT div ANY>\n  // <!ELEMENT title (#PCDATA)>\n  // <!ELEMENT book (title, author+)>\n  // <!ELEMENT name (content-model)>\n\n  // Skip leading whitespace after <!ELEMENT\n  i = skipWhitespace(xmlData, i);\n\n  // Read element name\n  let elementName = \"\";\n  while (i < xmlData.length && !/\\s/.test(xmlData[i])) {\n    elementName += xmlData[i];\n    i++;\n  }\n\n  // Validate element name\n  if (!validateEntityName(elementName)) {\n    throw new Error(`Invalid element name: \"${elementName}\"`);\n  }\n\n  // Skip whitespace after element name\n  i = skipWhitespace(xmlData, i);\n  let contentModel = \"\";\n  // Expect '(' to start content model\n  if (xmlData[i] === \"E\" && hasSeq(xmlData, \"MPTY\", i)) i += 6;else if (xmlData[i] === \"A\" && hasSeq(xmlData, \"NY\", i)) i += 4;else if (xmlData[i] === \"(\") {\n    i++; // Move past '('\n\n    // Read content model\n    while (i < xmlData.length && xmlData[i] !== \")\") {\n      contentModel += xmlData[i];\n      i++;\n    }\n    if (xmlData[i] !== \")\") {\n      throw new Error(\"Unterminated content model\");\n    }\n  } else {\n    throw new Error(`Invalid Element Expression, found \"${xmlData[i]}\"`);\n  }\n  return {\n    elementName,\n    contentModel: contentModel.trim(),\n    index: i\n  };\n}\nfunction readAttlistExp(xmlData, i) {\n  // Skip leading whitespace after <!ATTLIST\n  i = skipWhitespace(xmlData, i);\n\n  // Read element name\n  let elementName = \"\";\n  while (i < xmlData.length && !/\\s/.test(xmlData[i])) {\n    elementName += xmlData[i];\n    i++;\n  }\n\n  // Validate element name\n  validateEntityName(elementName);\n\n  // Skip whitespace after element name\n  i = skipWhitespace(xmlData, i);\n\n  // Read attribute name\n  let attributeName = \"\";\n  while (i < xmlData.length && !/\\s/.test(xmlData[i])) {\n    attributeName += xmlData[i];\n    i++;\n  }\n\n  // Validate attribute name\n  if (!validateEntityName(attributeName)) {\n    throw new Error(`Invalid attribute name: \"${attributeName}\"`);\n  }\n\n  // Skip whitespace after attribute name\n  i = skipWhitespace(xmlData, i);\n\n  // Read attribute type\n  let attributeType = \"\";\n  if (xmlData.substring(i, i + 8).toUpperCase() === \"NOTATION\") {\n    attributeType = \"NOTATION\";\n    i += 8; // Move past \"NOTATION\"\n\n    // Skip whitespace after \"NOTATION\"\n    i = skipWhitespace(xmlData, i);\n\n    // Expect '(' to start the list of notations\n    if (xmlData[i] !== \"(\") {\n      throw new Error(`Expected '(', found \"${xmlData[i]}\"`);\n    }\n    i++; // Move past '('\n\n    // Read the list of allowed notations\n    let allowedNotations = [];\n    while (i < xmlData.length && xmlData[i] !== \")\") {\n      let notation = \"\";\n      while (i < xmlData.length && xmlData[i] !== \"|\" && xmlData[i] !== \")\") {\n        notation += xmlData[i];\n        i++;\n      }\n\n      // Validate notation name\n      notation = notation.trim();\n      if (!validateEntityName(notation)) {\n        throw new Error(`Invalid notation name: \"${notation}\"`);\n      }\n      allowedNotations.push(notation);\n\n      // Skip '|' separator or exit loop\n      if (xmlData[i] === \"|\") {\n        i++; // Move past '|'\n        i = skipWhitespace(xmlData, i); // Skip optional whitespace after '|'\n      }\n    }\n    if (xmlData[i] !== \")\") {\n      throw new Error(\"Unterminated list of notations\");\n    }\n    i++; // Move past ')'\n\n    // Store the allowed notations as part of the attribute type\n    attributeType += \" (\" + allowedNotations.join(\"|\") + \")\";\n  } else {\n    // Handle simple types (e.g., CDATA, ID, IDREF, etc.)\n    while (i < xmlData.length && !/\\s/.test(xmlData[i])) {\n      attributeType += xmlData[i];\n      i++;\n    }\n\n    // Validate simple attribute type\n    const validTypes = [\"CDATA\", \"ID\", \"IDREF\", \"IDREFS\", \"ENTITY\", \"ENTITIES\", \"NMTOKEN\", \"NMTOKENS\"];\n    if (!validTypes.includes(attributeType.toUpperCase())) {\n      throw new Error(`Invalid attribute type: \"${attributeType}\"`);\n    }\n  }\n\n  // Skip whitespace after attribute type\n  i = skipWhitespace(xmlData, i);\n\n  // Read default value\n  let defaultValue = \"\";\n  if (xmlData.substring(i, i + 8).toUpperCase() === \"#REQUIRED\") {\n    defaultValue = \"#REQUIRED\";\n    i += 8;\n  } else if (xmlData.substring(i, i + 7).toUpperCase() === \"#IMPLIED\") {\n    defaultValue = \"#IMPLIED\";\n    i += 7;\n  } else {\n    [i, defaultValue] = readIdentifierVal(xmlData, i, \"ATTLIST\");\n  }\n  return {\n    elementName,\n    attributeName,\n    attributeType,\n    defaultValue,\n    index: i\n  };\n}\nfunction hasSeq(data, seq, i) {\n  for (let j = 0; j < seq.length; j++) {\n    if (seq[j] !== data[i + j + 1]) return false;\n  }\n  return true;\n}\nfunction validateEntityName(name) {\n  if (isName(name)) return name;else throw new Error(`Invalid entity name ${name}`);\n}", "const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)([0-9]*(\\.[0-9]*)?)$/;\n// const octRegex = /^0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\nconst consider = {\n  hex: true,\n  // oct: false,\n  leadingZeros: true,\n  decimalPoint: \"\\.\",\n  eNotation: true\n  //skipLike: /regex/\n};\nexport default function toNumber(str, options = {}) {\n  options = Object.assign({}, consider, options);\n  if (!str || typeof str !== \"string\") return str;\n  let trimmedStr = str.trim();\n  if (options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;else if (str === \"0\") return 0;else if (options.hex && hexRegex.test(trimmedStr)) {\n    return parse_int(trimmedStr, 16);\n    // }else if (options.oct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n  } else if (trimmedStr.search(/.+[eE].+/) !== -1) {\n    //eNotation\n    return resolveEnotation(str, trimmedStr, options);\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n  } else {\n    //separate negative sign, leading zeros, and rest number\n    const match = numRegex.exec(trimmedStr);\n    // +00.123 => [ , '+', '00', '.123', ..\n    if (match) {\n      const sign = match[1] || \"\";\n      const leadingZeros = match[2];\n      let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n      const decimalAdjacentToLeadingZeros = sign ?\n      // 0., -00., 000.\n      str[leadingZeros.length + 1] === \".\" : str[leadingZeros.length] === \".\";\n\n      //trim ending zeros for floating number\n      if (!options.leadingZeros //leading zeros are not allowed\n      && (leadingZeros.length > 1 || leadingZeros.length === 1 && !decimalAdjacentToLeadingZeros)) {\n        // 00, 00.3, +03.24, 03, 03.24\n        return str;\n      } else {\n        //no leading zeros or leading zeros are allowed\n        const num = Number(trimmedStr);\n        const parsedStr = String(num);\n        if (num === 0) return num;\n        if (parsedStr.search(/[eE]/) !== -1) {\n          //given number is long and parsed to eNotation\n          if (options.eNotation) return num;else return str;\n        } else if (trimmedStr.indexOf(\".\") !== -1) {\n          //floating number\n          if (parsedStr === \"0\") return num; //0.0\n          else if (parsedStr === numTrimmedByZeros) return num; //0.456. 0.79000\n          else if (parsedStr === `${sign}${numTrimmedByZeros}`) return num;else return str;\n        }\n        let n = leadingZeros ? numTrimmedByZeros : trimmedStr;\n        if (leadingZeros) {\n          // -009 => -9\n          return n === parsedStr || sign + n === parsedStr ? num : str;\n        } else {\n          // +9\n          return n === parsedStr || n === sign + parsedStr ? num : str;\n        }\n      }\n    } else {\n      //non-numeric string\n      return str;\n    }\n  }\n}\nconst eNotationRegx = /^([-+])?(0*)(\\d*(\\.\\d*)?[eE][-\\+]?\\d+)$/;\nfunction resolveEnotation(str, trimmedStr, options) {\n  if (!options.eNotation) return str;\n  const notation = trimmedStr.match(eNotationRegx);\n  if (notation) {\n    let sign = notation[1] || \"\";\n    const eChar = notation[3].indexOf(\"e\") === -1 ? \"E\" : \"e\";\n    const leadingZeros = notation[2];\n    const eAdjacentToLeadingZeros = sign ?\n    // 0E.\n    str[leadingZeros.length + 1] === eChar : str[leadingZeros.length] === eChar;\n    if (leadingZeros.length > 1 && eAdjacentToLeadingZeros) return str;else if (leadingZeros.length === 1 && (notation[3].startsWith(`.${eChar}`) || notation[3][0] === eChar)) {\n      return Number(trimmedStr);\n    } else if (options.leadingZeros && !eAdjacentToLeadingZeros) {\n      //accept with leading zeros\n      //remove leading 0s\n      trimmedStr = (notation[1] || \"\") + notation[3];\n      return Number(trimmedStr);\n    } else return str;\n  } else {\n    return str;\n  }\n}\n\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\nfunction trimZeros(numStr) {\n  if (numStr && numStr.indexOf(\".\") !== -1) {\n    //float\n    numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n    if (numStr === \".\") numStr = \"0\";else if (numStr[0] === \".\") numStr = \"0\" + numStr;else if (numStr[numStr.length - 1] === \".\") numStr = numStr.substring(0, numStr.length - 1);\n    return numStr;\n  }\n  return numStr;\n}\nfunction parse_int(numStr, base) {\n  //polyfill\n  if (parseInt) return parseInt(numStr, base);else if (Number.parseInt) return Number.parseInt(numStr, base);else if (window && window.parseInt) return window.parseInt(numStr, base);else throw new Error(\"parseInt, Number.parseInt, window.parseInt are not supported\");\n}", "export default function getIgnoreAttributesFn(ignoreAttributes) {\n  if (typeof ignoreAttributes === 'function') {\n    return ignoreAttributes;\n  }\n  if (Array.isArray(ignoreAttributes)) {\n    return attrName => {\n      for (const pattern of ignoreAttributes) {\n        if (typeof pattern === 'string' && attrName === pattern) {\n          return true;\n        }\n        if (pattern instanceof RegExp && pattern.test(attrName)) {\n          return true;\n        }\n      }\n    };\n  }\n  return () => false;\n}", "'use strict';\n\n///@ts-check\nimport { getAllMatches, isExist } from '../util.js';\nimport xmlNode from './xmlNode.js';\nimport readDocType from './DocTypeReader.js';\nimport toNumber from \"strnum\";\nimport getIgnoreAttributesFn from \"../ignoreAttributes.js\";\n\n// const regx =\n//   '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n//   .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nexport default class OrderedObjParser {\n  constructor(options) {\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"apos\": {\n        regex: /&(apos|#39|#x27);/g,\n        val: \"'\"\n      },\n      \"gt\": {\n        regex: /&(gt|#62|#x3E);/g,\n        val: \">\"\n      },\n      \"lt\": {\n        regex: /&(lt|#60|#x3C);/g,\n        val: \"<\"\n      },\n      \"quot\": {\n        regex: /&(quot|#34|#x22);/g,\n        val: \"\\\"\"\n      }\n    };\n    this.ampEntity = {\n      regex: /&(amp|#38|#x26);/g,\n      val: \"&\"\n    };\n    this.htmlEntities = {\n      \"space\": {\n        regex: /&(nbsp|#160);/g,\n        val: \" \"\n      },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\": {\n        regex: /&(cent|#162);/g,\n        val: \"¢\"\n      },\n      \"pound\": {\n        regex: /&(pound|#163);/g,\n        val: \"£\"\n      },\n      \"yen\": {\n        regex: /&(yen|#165);/g,\n        val: \"¥\"\n      },\n      \"euro\": {\n        regex: /&(euro|#8364);/g,\n        val: \"€\"\n      },\n      \"copyright\": {\n        regex: /&(copy|#169);/g,\n        val: \"©\"\n      },\n      \"reg\": {\n        regex: /&(reg|#174);/g,\n        val: \"®\"\n      },\n      \"inr\": {\n        regex: /&(inr|#8377);/g,\n        val: \"₹\"\n      },\n      \"num_dec\": {\n        regex: /&#([0-9]{1,7});/g,\n        val: (_, str) => String.fromCodePoint(Number.parseInt(str, 10))\n      },\n      \"num_hex\": {\n        regex: /&#x([0-9a-fA-F]{1,6});/g,\n        val: (_, str) => String.fromCodePoint(Number.parseInt(str, 16))\n      }\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n    this.addChild = addChild;\n    this.ignoreAttributesFn = getIgnoreAttributesFn(this.options.ignoreAttributes);\n  }\n}\nfunction addExternalEntities(externalEntities) {\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n      regex: new RegExp(\"&\" + ent + \";\", \"g\"),\n      val: externalEntities[ent]\n    };\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if (val.length > 0) {\n      if (!escapeEntities) val = this.replaceEntitiesValue(val);\n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if (newval === null || newval === undefined) {\n        //don't parse\n        return val;\n      } else if (typeof newval !== typeof val || newval !== val) {\n        //overwrite\n        return newval;\n      } else if (this.options.trimValues) {\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      } else {\n        const trimmedVal = val.trim();\n        if (trimmedVal === val) {\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        } else {\n          return val;\n        }\n      }\n    }\n  }\n}\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\nfunction buildAttributesMap(attrStr, jPath, tagName) {\n  if (this.options.ignoreAttributes !== true && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      if (this.ignoreAttributesFn(attrName, jPath)) {\n        continue;\n      }\n      let oldVal = matches[i][4];\n      let aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (this.options.transformAttributeName) {\n          aName = this.options.transformAttributeName(aName);\n        }\n        if (aName === \"__proto__\") aName = \"#__proto__\";\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if (newVal === null || newVal === undefined) {\n            //don't parse\n            attrs[aName] = oldVal;\n          } else if (typeof newVal !== typeof oldVal || newVal !== oldVal) {\n            //overwrite\n            attrs[aName] = newVal;\n          } else {\n            //parse\n            attrs[aName] = parseValue(oldVal, this.options.parseAttributeValue, this.options.numberParseOptions);\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs;\n  }\n}\nconst parseXml = function (xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for (let i = 0; i < xmlData.length; i++) {\n    //for each char in XML data\n    const ch = xmlData[i];\n    if (ch === '<') {\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if (xmlData[i + 1] === '/') {\n        //Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\");\n        let tagName = xmlData.substring(i + 2, closeIndex).trim();\n        if (this.options.removeNSPrefix) {\n          const colonIndex = tagName.indexOf(\":\");\n          if (colonIndex !== -1) {\n            tagName = tagName.substr(colonIndex + 1);\n          }\n        }\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n        if (currentNode) {\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        //check if last tag of nested tag was unpaired tag\n        const lastTagName = jPath.substring(jPath.lastIndexOf(\".\") + 1);\n        if (tagName && this.options.unpairedTags.indexOf(tagName) !== -1) {\n          throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);\n        }\n        let propIndex = 0;\n        if (lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1) {\n          propIndex = jPath.lastIndexOf('.', jPath.lastIndexOf('.') - 1);\n          this.tagsNodeStack.pop();\n        } else {\n          propIndex = jPath.lastIndexOf(\".\");\n        }\n        jPath = jPath.substring(0, propIndex);\n        currentNode = this.tagsNodeStack.pop(); //avoid recursion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if (xmlData[i + 1] === '?') {\n        let tagData = readTagExp(xmlData, i, false, \"?>\");\n        if (!tagData) throw new Error(\"Pi Tag is not closed.\");\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if (this.options.ignoreDeclaration && tagData.tagName === \"?xml\" || this.options.ignorePiTags) {} else {\n          const childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          if (tagData.tagName !== tagData.tagExp && tagData.attrExpPresent) {\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);\n          }\n          this.addChild(currentNode, childNode, jPath, i);\n        }\n        i = tagData.closeIndex + 1;\n      } else if (xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i + 4, \"Comment is not closed.\");\n        if (this.options.commentPropName) {\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n          currentNode.add(this.options.commentPropName, [{\n            [this.options.textNodeName]: comment\n          }]);\n        }\n        i = endIndex;\n      } else if (xmlData.substr(i + 1, 2) === '!D') {\n        const result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      } else if (xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9, closeIndex);\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true, true);\n        if (val == undefined) val = \"\";\n\n        //cdata should be set even if it is 0 length string\n        if (this.options.cdataPropName) {\n          currentNode.add(this.options.cdataPropName, [{\n            [this.options.textNodeName]: tagExp\n          }]);\n        } else {\n          currentNode.add(this.options.textNodeName, val);\n        }\n        i = closeIndex + 2;\n      } else {\n        //Opening tag\n        let result = readTagExp(xmlData, i, this.options.removeNSPrefix);\n        let tagName = result.tagName;\n        const rawTagName = result.rawTagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n\n        //save text as child node\n        if (currentNode && textData) {\n          if (currentNode.tagname !== '!xml') {\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if (lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1) {\n          currentNode = this.tagsNodeStack.pop();\n          jPath = jPath.substring(0, jPath.lastIndexOf(\".\"));\n        }\n        if (tagName !== xmlObj.tagname) {\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n        const startIndex = i;\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {\n          let tagContent = \"\";\n          //self-closing tag\n          if (tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1) {\n            if (tagName[tagName.length - 1] === \"/\") {\n              //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            } else {\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            i = result.closeIndex;\n          }\n          //unpaired tag\n          else if (this.options.unpairedTags.indexOf(tagName) !== -1) {\n            i = result.closeIndex;\n          }\n          //normal tag\n          else {\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, rawTagName, closeIndex + 1);\n            if (!result) throw new Error(`Unexpected end of ${rawTagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n          const childNode = new xmlNode(tagName);\n          if (tagName !== tagExp && attrExpPresent) {\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n          }\n          if (tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          this.addChild(currentNode, childNode, jPath, startIndex);\n        } else {\n          //selfClosing tag\n          if (tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1) {\n            if (tagName[tagName.length - 1] === \"/\") {\n              //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            } else {\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            if (this.options.transformTagName) {\n              tagName = this.options.transformTagName(tagName);\n            }\n            const childNode = new xmlNode(tagName);\n            if (tagName !== tagExp && attrExpPresent) {\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath, startIndex);\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          }\n          //opening tag\n          else {\n            const childNode = new xmlNode(tagName);\n            this.tagsNodeStack.push(currentNode);\n            if (tagName !== tagExp && attrExpPresent) {\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath, startIndex);\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    } else {\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n};\nfunction addChild(currentNode, childNode, jPath, startIndex) {\n  // unset startIndex if not requested\n  if (!this.options.captureMetaData) startIndex = undefined;\n  const result = this.options.updateTag(childNode.tagname, jPath, childNode[\":@\"]);\n  if (result === false) {} else if (typeof result === \"string\") {\n    childNode.tagname = result;\n    currentNode.addChild(childNode, startIndex);\n  } else {\n    currentNode.addChild(childNode, startIndex);\n  }\n}\nconst replaceEntitiesValue = function (val) {\n  if (this.options.processEntities) {\n    for (let entityName in this.docTypeEntities) {\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace(entity.regx, entity.val);\n    }\n    for (let entityName in this.lastEntities) {\n      const entity = this.lastEntities[entityName];\n      val = val.replace(entity.regex, entity.val);\n    }\n    if (this.options.htmlEntities) {\n      for (let entityName in this.htmlEntities) {\n        const entity = this.htmlEntities[entityName];\n        val = val.replace(entity.regex, entity.val);\n      }\n    }\n    val = val.replace(this.ampEntity.regex, this.ampEntity.val);\n  }\n  return val;\n};\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) {\n    //store previously collected data as textNode\n    if (isLeafNode === undefined) isLeafNode = currentNode.child.length === 0;\n    textData = this.parseTextData(textData, currentNode.tagname, jPath, false, currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false, isLeafNode);\n    if (textData !== undefined && textData !== \"\") currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName) {\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if (allNodesExp === stopNodeExp || jPath === stopNodeExp) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-double quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\") {\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n      if (ch === attrBoundary) attrBoundary = \"\"; //reset\n    } else if (ch === '\"' || ch === \"'\") {\n      attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if (closingChar[1]) {\n        if (xmlData[index + 1] === closingChar[1]) {\n          return {\n            data: tagExp,\n            index: index\n          };\n        }\n      } else {\n        return {\n          data: tagExp,\n          index: index\n        };\n      }\n    } else if (ch === '\\t') {\n      ch = \" \";\n    }\n    tagExp += ch;\n  }\n}\nfunction findClosingIndex(xmlData, str, i, errMsg) {\n  const closingIndex = xmlData.indexOf(str, i);\n  if (closingIndex === -1) {\n    throw new Error(errMsg);\n  } else {\n    return closingIndex + str.length - 1;\n  }\n}\nfunction readTagExp(xmlData, i, removeNSPrefix, closingChar = \">\") {\n  const result = tagExpWithClosingIndex(xmlData, i + 1, closingChar);\n  if (!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if (separatorIndex !== -1) {\n    //separate tag name and attributes expression\n    tagName = tagExp.substring(0, separatorIndex);\n    tagExp = tagExp.substring(separatorIndex + 1).trimStart();\n  }\n  const rawTagName = tagName;\n  if (removeNSPrefix) {\n    const colonIndex = tagName.indexOf(\":\");\n    if (colonIndex !== -1) {\n      tagName = tagName.substr(colonIndex + 1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n    rawTagName: rawTagName\n  };\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i) {\n  const startIndex = i;\n  // Starting at 1 since we already have an open tag\n  let openTagCount = 1;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === \"<\") {\n      if (xmlData[i + 1] === \"/\") {\n        //close tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n        let closeTagName = xmlData.substring(i + 2, closeIndex).trim();\n        if (closeTagName === tagName) {\n          openTagCount--;\n          if (openTagCount === 0) {\n            return {\n              tagContent: xmlData.substring(startIndex, i),\n              i: closeIndex\n            };\n          }\n        }\n        i = closeIndex;\n      } else if (xmlData[i + 1] === '?') {\n        const closeIndex = findClosingIndex(xmlData, \"?>\", i + 1, \"StopNode is not closed.\");\n        i = closeIndex;\n      } else if (xmlData.substr(i + 1, 3) === '!--') {\n        const closeIndex = findClosingIndex(xmlData, \"-->\", i + 3, \"StopNode is not closed.\");\n        i = closeIndex;\n      } else if (xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"StopNode is not closed.\") - 2;\n        i = closeIndex;\n      } else {\n        const tagData = readTagExp(xmlData, i, '>');\n        if (tagData) {\n          const openTagName = tagData && tagData.tagName;\n          if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length - 1] !== \"/\") {\n            openTagCount++;\n          }\n          i = tagData.closeIndex;\n        }\n      }\n    }\n  } //end for loop\n}\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if (newval === 'true') return true;else if (newval === 'false') return false;else return toNumber(val, options);\n  } else {\n    if (isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}", "'use strict';\n\nimport XmlNode from './xmlNode.js';\nconst METADATA_SYMBOL = XmlNode.getMetaDataSymbol();\n\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\nexport default function prettify(node, options) {\n  return compress(node, options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath) {\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if (jPath === undefined) newJpath = property;else newJpath = jPath + \".\" + property;\n    if (property === options.textNodeName) {\n      if (text === undefined) text = tagObj[property];else text += \"\" + tagObj[property];\n    } else if (property === undefined) {\n      continue;\n    } else if (tagObj[property]) {\n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n      if (tagObj[METADATA_SYMBOL] !== undefined) {\n        val[METADATA_SYMBOL] = tagObj[METADATA_SYMBOL]; // copy over metadata\n      }\n      if (tagObj[\":@\"]) {\n        assignAttributes(val, tagObj[\":@\"], newJpath, options);\n      } else if (Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode) {\n        val = val[options.textNodeName];\n      } else if (Object.keys(val).length === 0) {\n        if (options.alwaysCreateTextNode) val[options.textNodeName] = \"\";else val = \"\";\n      }\n      if (compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {\n        if (!Array.isArray(compressedObj[property])) {\n          compressedObj[property] = [compressedObj[property]];\n        }\n        compressedObj[property].push(val);\n      } else {\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf)) {\n          compressedObj[property] = [val];\n        } else {\n          compressedObj[property] = val;\n        }\n      }\n    }\n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if (typeof text === \"string\") {\n    if (text.length > 0) compressedObj[options.textNodeName] = text;\n  } else if (text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\nfunction propName(obj) {\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if (key !== \":@\") return key;\n  }\n}\nfunction assignAttributes(obj, attrMap, jpath, options) {\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [attrMap[atrrName]];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\nfunction isLeafTag(obj, options) {\n  const {\n    textNodeName\n  } = options;\n  const propCount = Object.keys(obj).length;\n  if (propCount === 0) {\n    return true;\n  }\n  if (propCount === 1 && (obj[textNodeName] || typeof obj[textNodeName] === \"boolean\" || obj[textNodeName] === 0)) {\n    return true;\n  }\n  return false;\n}", "import { buildOptions } from './OptionsBuilder.js';\nimport OrderedObjParser from './OrderedObjParser.js';\nimport prettify from './node2json.js';\nimport { validate } from \"../validator.js\";\nimport XmlNode from './xmlNode.js';\nexport default class XMLParser {\n  constructor(options) {\n    this.externalEntities = {};\n    this.options = buildOptions(options);\n  }\n  /**\n   * Parse XML dats to JS object \n   * @param {string|Buffer} xmlData \n   * @param {boolean|Object} validationOption \n   */\n  parse(xmlData, validationOption) {\n    if (typeof xmlData === \"string\") {} else if (xmlData.toString) {\n      xmlData = xmlData.toString();\n    } else {\n      throw new Error(\"XML data is accepted in String or Bytes[] form.\");\n    }\n    if (validationOption) {\n      if (validationOption === true) validationOption = {}; //validate with default options\n\n      const result = validate(xmlData, validationOption);\n      if (result !== true) {\n        throw Error(`${result.err.msg}:${result.err.line}:${result.err.col}`);\n      }\n    }\n    const orderedObjParser = new OrderedObjParser(this.options);\n    orderedObjParser.addExternalEntities(this.externalEntities);\n    const orderedResult = orderedObjParser.parseXml(xmlData);\n    if (this.options.preserveOrder || orderedResult === undefined) return orderedResult;else return prettify(orderedResult, this.options);\n  }\n\n  /**\n   * Add Entity which is not by default supported by this library\n   * @param {string} key \n   * @param {string} value \n   */\n  addEntity(key, value) {\n    if (value.indexOf(\"&\") !== -1) {\n      throw new Error(\"Entity value can't have '&'\");\n    } else if (key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1) {\n      throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\");\n    } else if (value === \"&\") {\n      throw new Error(\"An entity with value '&' is not permitted\");\n    } else {\n      this.externalEntities[key] = value;\n    }\n  }\n\n  /**\n   * Returns a Symbol that can be used to access the metadata\n   * property on a node.\n   * \n   * If Symbol is not available in the environment, an ordinary property is used\n   * and the name of the property is here returned.\n   * \n   * The XMLMetaData property is only present when `captureMetaData`\n   * is true in the options.\n   */\n  static getMetaDataSymbol() {\n    return XmlNode.getMetaDataSymbol();\n  }\n}", "const EOL = \"\\n\";\n\n/**\n * \n * @param {array} jArray \n * @param {any} options \n * @returns \n */\nexport default function toXml(jArray, options) {\n  let indentation = \"\";\n  if (options.format && options.indentBy.length > 0) {\n    indentation = EOL;\n  }\n  return arrToStr(jArray, options, \"\", indentation);\n}\nfunction arrToStr(arr, options, jPath, indentation) {\n  let xmlStr = \"\";\n  let isPreviousElementTag = false;\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const tagName = propName(tagObj);\n    if (tagName === undefined) continue;\n    let newJPath = \"\";\n    if (jPath.length === 0) newJPath = tagName;else newJPath = `${jPath}.${tagName}`;\n    if (tagName === options.textNodeName) {\n      let tagText = tagObj[tagName];\n      if (!isStopNode(newJPath, options)) {\n        tagText = options.tagValueProcessor(tagName, tagText);\n        tagText = replaceEntitiesValue(tagText, options);\n      }\n      if (isPreviousElementTag) {\n        xmlStr += indentation;\n      }\n      xmlStr += tagText;\n      isPreviousElementTag = false;\n      continue;\n    } else if (tagName === options.cdataPropName) {\n      if (isPreviousElementTag) {\n        xmlStr += indentation;\n      }\n      xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;\n      isPreviousElementTag = false;\n      continue;\n    } else if (tagName === options.commentPropName) {\n      xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;\n      isPreviousElementTag = true;\n      continue;\n    } else if (tagName[0] === \"?\") {\n      const attStr = attr_to_str(tagObj[\":@\"], options);\n      const tempInd = tagName === \"?xml\" ? \"\" : indentation;\n      let piTextNodeName = tagObj[tagName][0][options.textNodeName];\n      piTextNodeName = piTextNodeName.length !== 0 ? \" \" + piTextNodeName : \"\"; //remove extra spacing\n      xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`;\n      isPreviousElementTag = true;\n      continue;\n    }\n    let newIdentation = indentation;\n    if (newIdentation !== \"\") {\n      newIdentation += options.indentBy;\n    }\n    const attStr = attr_to_str(tagObj[\":@\"], options);\n    const tagStart = indentation + `<${tagName}${attStr}`;\n    const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);\n    if (options.unpairedTags.indexOf(tagName) !== -1) {\n      if (options.suppressUnpairedNode) xmlStr += tagStart + \">\";else xmlStr += tagStart + \"/>\";\n    } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {\n      xmlStr += tagStart + \"/>\";\n    } else if (tagValue && tagValue.endsWith(\">\")) {\n      xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;\n    } else {\n      xmlStr += tagStart + \">\";\n      if (tagValue && indentation !== \"\" && (tagValue.includes(\"/>\") || tagValue.includes(\"</\"))) {\n        xmlStr += indentation + options.indentBy + tagValue + indentation;\n      } else {\n        xmlStr += tagValue;\n      }\n      xmlStr += `</${tagName}>`;\n    }\n    isPreviousElementTag = true;\n  }\n  return xmlStr;\n}\nfunction propName(obj) {\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if (!obj.hasOwnProperty(key)) continue;\n    if (key !== \":@\") return key;\n  }\n}\nfunction attr_to_str(attrMap, options) {\n  let attrStr = \"\";\n  if (attrMap && !options.ignoreAttributes) {\n    for (let attr in attrMap) {\n      if (!attrMap.hasOwnProperty(attr)) continue;\n      let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);\n      attrVal = replaceEntitiesValue(attrVal, options);\n      if (attrVal === true && options.suppressBooleanAttributes) {\n        attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;\n      } else {\n        attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}=\"${attrVal}\"`;\n      }\n    }\n  }\n  return attrStr;\n}\nfunction isStopNode(jPath, options) {\n  jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);\n  let tagName = jPath.substr(jPath.lastIndexOf(\".\") + 1);\n  for (let index in options.stopNodes) {\n    if (options.stopNodes[index] === jPath || options.stopNodes[index] === \"*.\" + tagName) return true;\n  }\n  return false;\n}\nfunction replaceEntitiesValue(textValue, options) {\n  if (textValue && textValue.length > 0 && options.processEntities) {\n    for (let i = 0; i < options.entities.length; i++) {\n      const entity = options.entities[i];\n      textValue = textValue.replace(entity.regex, entity.val);\n    }\n  }\n  return textValue;\n}", "'use strict';\n\n//parse Empty Node as self closing node\nimport buildFromOrderedJs from './orderedJs2Xml.js';\nimport getIgnoreAttributesFn from \"../ignoreAttributes.js\";\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attributesGroupName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataPropName: false,\n  format: false,\n  indentBy: '  ',\n  suppressEmptyNode: false,\n  suppressUnpairedNode: true,\n  suppressBooleanAttributes: true,\n  tagValueProcessor: function (key, a) {\n    return a;\n  },\n  attributeValueProcessor: function (attrName, a) {\n    return a;\n  },\n  preserveOrder: false,\n  commentPropName: false,\n  unpairedTags: [],\n  entities: [{\n    regex: new RegExp(\"&\", \"g\"),\n    val: \"&amp;\"\n  },\n  //it must be on top\n  {\n    regex: new RegExp(\">\", \"g\"),\n    val: \"&gt;\"\n  }, {\n    regex: new RegExp(\"<\", \"g\"),\n    val: \"&lt;\"\n  }, {\n    regex: new RegExp(\"\\'\", \"g\"),\n    val: \"&apos;\"\n  }, {\n    regex: new RegExp(\"\\\"\", \"g\"),\n    val: \"&quot;\"\n  }],\n  processEntities: true,\n  stopNodes: [],\n  // transformTagName: false,\n  // transformAttributeName: false,\n  oneListGroup: false\n};\nexport default function Builder(options) {\n  this.options = Object.assign({}, defaultOptions, options);\n  if (this.options.ignoreAttributes === true || this.options.attributesGroupName) {\n    this.isAttribute = function /*a*/\n    () {\n      return false;\n    };\n  } else {\n    this.ignoreAttributesFn = getIgnoreAttributesFn(this.options.ignoreAttributes);\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n  this.processTextOrObjNode = processTextOrObjNode;\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function () {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n}\nBuilder.prototype.build = function (jObj) {\n  if (this.options.preserveOrder) {\n    return buildFromOrderedJs(jObj, this.options);\n  } else {\n    if (Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1) {\n      jObj = {\n        [this.options.arrayNodeName]: jObj\n      };\n    }\n    return this.j2x(jObj, 0, []).val;\n  }\n};\nBuilder.prototype.j2x = function (jObj, level, ajPath) {\n  let attrStr = '';\n  let val = '';\n  const jPath = ajPath.join('.');\n  for (let key in jObj) {\n    if (!Object.prototype.hasOwnProperty.call(jObj, key)) continue;\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node only if it is not an attribute\n      if (this.isAttribute(key)) {\n        val += '';\n      }\n    } else if (jObj[key] === null) {\n      // null attribute should be ignored by the attribute list, but should not cause the tag closing\n      if (this.isAttribute(key)) {\n        val += '';\n      } else if (key === this.options.cdataPropName) {\n        val += '';\n      } else if (key[0] === '?') {\n        val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n      } else {\n        val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n      }\n      // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextValNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr && !this.ignoreAttributesFn(attr, jPath)) {\n        attrStr += this.buildAttrPairStr(attr, '' + jObj[key]);\n      } else if (!attr) {\n        //tag value\n        if (key === this.options.textNodeName) {\n          let newval = this.options.tagValueProcessor(key, '' + jObj[key]);\n          val += this.replaceEntitiesValue(newval);\n        } else {\n          val += this.buildTextValNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      const arrLen = jObj[key].length;\n      let listTagVal = \"\";\n      let listTagAttr = \"\";\n      for (let j = 0; j < arrLen; j++) {\n        const item = jObj[key][j];\n        if (typeof item === 'undefined') {\n          // supress undefined node\n        } else if (item === null) {\n          if (key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n        } else if (typeof item === 'object') {\n          if (this.options.oneListGroup) {\n            const result = this.j2x(item, level + 1, ajPath.concat(key));\n            listTagVal += result.val;\n            if (this.options.attributesGroupName && item.hasOwnProperty(this.options.attributesGroupName)) {\n              listTagAttr += result.attrStr;\n            }\n          } else {\n            listTagVal += this.processTextOrObjNode(item, key, level, ajPath);\n          }\n        } else {\n          if (this.options.oneListGroup) {\n            let textValue = this.options.tagValueProcessor(key, item);\n            textValue = this.replaceEntitiesValue(textValue);\n            listTagVal += textValue;\n          } else {\n            listTagVal += this.buildTextValNode(item, key, '', level);\n          }\n        }\n      }\n      if (this.options.oneListGroup) {\n        listTagVal = this.buildObjectNode(listTagVal, key, listTagAttr, level);\n      }\n      val += listTagVal;\n    } else {\n      //nested node\n      if (this.options.attributesGroupName && key === this.options.attributesGroupName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += this.buildAttrPairStr(Ks[j], '' + jObj[key][Ks[j]]);\n        }\n      } else {\n        val += this.processTextOrObjNode(jObj[key], key, level, ajPath);\n      }\n    }\n  }\n  return {\n    attrStr: attrStr,\n    val: val\n  };\n};\nBuilder.prototype.buildAttrPairStr = function (attrName, val) {\n  val = this.options.attributeValueProcessor(attrName, '' + val);\n  val = this.replaceEntitiesValue(val);\n  if (this.options.suppressBooleanAttributes && val === \"true\") {\n    return ' ' + attrName;\n  } else return ' ' + attrName + '=\"' + val + '\"';\n};\nfunction processTextOrObjNode(object, key, level, ajPath) {\n  const result = this.j2x(object, level + 1, ajPath.concat(key));\n  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\n    return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);\n  } else {\n    return this.buildObjectNode(result.val, key, result.attrStr, level);\n  }\n}\nBuilder.prototype.buildObjectNode = function (val, key, attrStr, level) {\n  if (val === \"\") {\n    if (key[0] === \"?\") return this.indentate(level) + '<' + key + attrStr + '?' + this.tagEndChar;else {\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }\n  } else {\n    let tagEndExp = '</' + key + this.tagEndChar;\n    let piClosingChar = \"\";\n    if (key[0] === \"?\") {\n      piClosingChar = \"?\";\n      tagEndExp = \"\";\n    }\n\n    // attrStr is an empty string in case the attribute came as undefined or null\n    if ((attrStr || attrStr === '') && val.indexOf('<') === -1) {\n      return this.indentate(level) + '<' + key + attrStr + piClosingChar + '>' + val + tagEndExp;\n    } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {\n      return this.indentate(level) + `<!--${val}-->` + this.newLine;\n    } else {\n      return this.indentate(level) + '<' + key + attrStr + piClosingChar + this.tagEndChar + val + this.indentate(level) + tagEndExp;\n    }\n  }\n};\nBuilder.prototype.closeTag = function (key) {\n  let closeTag = \"\";\n  if (this.options.unpairedTags.indexOf(key) !== -1) {\n    //unpaired\n    if (!this.options.suppressUnpairedNode) closeTag = \"/\";\n  } else if (this.options.suppressEmptyNode) {\n    //empty\n    closeTag = \"/\";\n  } else {\n    closeTag = `></${key}`;\n  }\n  return closeTag;\n};\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    if (key[0] === \"?\") return this.indentate(level) + '<' + key + attrStr + '?' + this.tagEndChar;else {\n      return this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n      // return this.buildTagStr(level,key, attrStr);\n    }\n  }\n}\nBuilder.prototype.buildTextValNode = function (val, key, attrStr, level) {\n  if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {\n    return this.indentate(level) + `<![CDATA[${val}]]>` + this.newLine;\n  } else if (this.options.commentPropName !== false && key === this.options.commentPropName) {\n    return this.indentate(level) + `<!--${val}-->` + this.newLine;\n  } else if (key[0] === \"?\") {\n    //PI tag\n    return this.indentate(level) + '<' + key + attrStr + '?' + this.tagEndChar;\n  } else {\n    let textValue = this.options.tagValueProcessor(key, val);\n    textValue = this.replaceEntitiesValue(textValue);\n    if (textValue === '') {\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    } else {\n      return this.indentate(level) + '<' + key + attrStr + '>' + textValue + '</' + key + this.tagEndChar;\n    }\n  }\n};\nBuilder.prototype.replaceEntitiesValue = function (textValue) {\n  if (textValue && textValue.length > 0 && this.options.processEntities) {\n    for (let i = 0; i < this.options.entities.length; i++) {\n      const entity = this.options.entities[i];\n      textValue = textValue.replace(entity.regex, entity.val);\n    }\n  }\n  return textValue;\n};\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix) && name !== this.options.textNodeName) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}", "'use strict';\n\nimport { validate } from './validator.js';\nimport XMLParser from './xmlparser/XMLParser.js';\nimport XMLBuilder from './xmlbuilder/json2xml.js';\nconst XMLValidator = {\n  validate: validate\n};\nexport { XMLParser, XMLValidator, XMLBuilder };"],
  "mappings": "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",
  "names": ["defaultOptions", "result", "METADATA_SYMBOL", "propName", "replaceEntitiesValue", "attStr", "defaultOptions"]
}
